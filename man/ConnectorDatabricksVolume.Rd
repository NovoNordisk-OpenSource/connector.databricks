% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/volume.R
\name{ConnectorDatabricksVolume}
\alias{ConnectorDatabricksVolume}
\title{Connector for databricks volume storage}
\description{
The ConnectorDatabricksVolume class, built on top of \link[connector:connector]{connector::connector}
class. It is a file storage connector for accessing and manipulating files
inside Databricks volumes.
}
\examples{
\dontshow{if (FALSE) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# Create file storage connector

cnt <- ConnectorDatabricksVolume$new(full_path = "my_adam/tester")

cnt

# List content
cnt$cnt_list_content()

# Write to the connector
cnt$cnt_write(iris, "iris.rds")

# Check it is there
cnt$cnt_list_content()

# Read the result back
cnt$cnt_read("iris.rds") |>
  head()
\dontshow{\}) # examplesIf}
}
\section{Super class}{
\code{\link[connector:connector]{connector::connector}} -> \code{ConnectorDatabricksVolume}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{path}}{\link{character} Path to the file storage on Volume}

\item{\code{catalog}}{\link{character} Databricks catalog}

\item{\code{schema}}{\link{character} Databricks schema}

\item{\code{full_path}}{\link{character} Full path to the file storage on Volume}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ConnectorDatabricksVolume-new}{\code{ConnectorDatabricksVolume$new()}}
\item \href{#method-ConnectorDatabricksVolume-cnt_download}{\code{ConnectorDatabricksVolume$cnt_download()}}
\item \href{#method-ConnectorDatabricksVolume-cnt_upload}{\code{ConnectorDatabricksVolume$cnt_upload()}}
\item \href{#method-ConnectorDatabricksVolume-cnt_create_directory}{\code{ConnectorDatabricksVolume$cnt_create_directory()}}
\item \href{#method-ConnectorDatabricksVolume-cnt_remove_directory}{\code{ConnectorDatabricksVolume$cnt_remove_directory()}}
\item \href{#method-ConnectorDatabricksVolume-clone}{\code{ConnectorDatabricksVolume$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="connector" data-topic="connector" data-id="cnt_list_content"><a href='../../connector/html/connector.html#method-connector-cnt_list_content'><code>connector::connector$cnt_list_content()</code></a></span></li>
<li><span class="pkg-link" data-pkg="connector" data-topic="connector" data-id="cnt_read"><a href='../../connector/html/connector.html#method-connector-cnt_read'><code>connector::connector$cnt_read()</code></a></span></li>
<li><span class="pkg-link" data-pkg="connector" data-topic="connector" data-id="cnt_remove"><a href='../../connector/html/connector.html#method-connector-cnt_remove'><code>connector::connector$cnt_remove()</code></a></span></li>
<li><span class="pkg-link" data-pkg="connector" data-topic="connector" data-id="cnt_write"><a href='../../connector/html/connector.html#method-connector-cnt_write'><code>connector::connector$cnt_write()</code></a></span></li>
<li><span class="pkg-link" data-pkg="connector" data-topic="connector" data-id="print"><a href='../../connector/html/connector.html#method-connector-print'><code>connector::connector$print()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ConnectorDatabricksVolume-new"></a>}}
\if{latex}{\out{\hypertarget{method-ConnectorDatabricksVolume-new}{}}}
\subsection{Method \code{new()}}{
Initializes the connector for Databricks volume storage.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConnectorDatabricksVolume$new(
  full_path = NULL,
  catalog = NULL,
  schema = NULL,
  path = NULL,
  extra_class = NULL,
  force = FALSE,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{full_path}}{\link{character} Full path to the file storage in format
\code{catalog/schema/path}. If NULL, \code{catalog}, \code{schema}, and \code{path} must be
provided.}

\item{\code{catalog}}{\link{character} Databricks catalog}

\item{\code{schema}}{\link{character} Databricks schema}

\item{\code{path}}{\link{character} Path to the file storage}

\item{\code{extra_class}}{\link{character} Extra class to assign to the new connector.}

\item{\code{force}}{\link{logical} If TRUE, the volume will be created without
asking if it does not exist.}

\item{\code{...}}{Additional arguments passed to the \link[connector:connector]{connector::connector}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \link{ConnectorDatabricksVolume} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ConnectorDatabricksVolume-cnt_download"></a>}}
\if{latex}{\out{\hypertarget{method-ConnectorDatabricksVolume-cnt_download}{}}}
\subsection{Method \code{cnt_download()}}{
Download a file
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConnectorDatabricksVolume$cnt_download(
  file_path,
  local_path = basename(name),
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file_path}}{Required. The absolute path of the file.}

\item{\code{local_path}}{local path for the file.}

\item{\code{...}}{Additional parameters to pass to the \link{cnt_download_content} method}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The file downloaded
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ConnectorDatabricksVolume-cnt_upload"></a>}}
\if{latex}{\out{\hypertarget{method-ConnectorDatabricksVolume-cnt_upload}{}}}
\subsection{Method \code{cnt_upload()}}{
Upload a file
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConnectorDatabricksVolume$cnt_upload(file_path, contents, overwrite, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file_path}}{The absolute path of the file.}

\item{\code{contents}}{File content}

\item{\code{overwrite}}{If true, an existing file will be overwritten.}

\item{\code{...}}{Additional parameters to pass to the \link{cnt_upload_content} method}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The file uploaded
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ConnectorDatabricksVolume-cnt_create_directory"></a>}}
\if{latex}{\out{\hypertarget{method-ConnectorDatabricksVolume-cnt_create_directory}{}}}
\subsection{Method \code{cnt_create_directory()}}{
Create a directory
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConnectorDatabricksVolume$cnt_create_directory(name, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{The name of the directory to create}

\item{\code{...}}{Additional parameters to pass to the \link{cnt_create_directory} method}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The directory created
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ConnectorDatabricksVolume-cnt_remove_directory"></a>}}
\if{latex}{\out{\hypertarget{method-ConnectorDatabricksVolume-cnt_remove_directory}{}}}
\subsection{Method \code{cnt_remove_directory()}}{
Remove a directory from the file storage.
See also \link{cnt_remove_directory}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConnectorDatabricksVolume$cnt_remove_directory(name, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{\link{character} The name of the directory to remove}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ConnectorDatabricksVolume-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ConnectorDatabricksVolume-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConnectorDatabricksVolume$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
