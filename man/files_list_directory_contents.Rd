% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/files_api.R
\name{files_list_directory_contents}
\alias{files_list_directory_contents}
\title{List directory contents.}
\usage{
files_list_directory_contents(
  directory_path,
  page_size = NULL,
  page_token = NULL,
  full.names = FALSE,
  client = DatabricksClient()
)
}
\arguments{
\item{directory_path}{Required. The absolute path of a directory.}

\item{page_size}{The maximum number of directory entries to return.}

\item{page_token}{An opaque page token which was the \code{next_page_token} in the
response of the previous request to list the contents of this directory.}

\item{full.names}{If \code{TRUE}, return the full path of the files, otherwise
just the file names.}

\item{client}{Required. Instance of DatabricksClient()}
}
\value{
\code{data.frame} with all of the response pages.
}
\description{
Returns the contents of a directory. If there is no directory at the
specified path, the API returns a HTTP 404 error.
}
\examples{
\dontshow{if (FALSE) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# In order to connect to databricks on environments where configurations are
# available via the environment variable DATABRICKS_CONFIG_FILE or located
# at ~/.databrickscfg - simply write
db_client <- DatabricksClient()
# To check if connection is established
open_connection <- db_client$debug_string() != ""

if (open_connection) {
  databrics_volume <- "/Volumes/my_adam/tester"
  connector.databricks:::list_file_directory_contents(db_client, databrics_volume)
}
\dontshow{\}) # examplesIf}
}
